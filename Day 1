Rotting Oranges:-

class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        rotten = []
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 2:
                    rotten.append([i,  j, 0])
        res = 0
        t = 0
        while(rotten != []):
            m = rotten.pop(0)
            for i in [[-1, 0], [1, 0], [0, 1], [0, -1]]:
                if len(grid)> m[0] + i[0] >= 0 and len(grid[0])> m[1] + i[1] >= 0 and grid[m[0] + i[0]][m[1] + i[1]] == 1:
                    grid[m[0] + i[0]][m[1] + i[1]] = 2
                    rotten.append([m[0] + i[0], m[1] + i[1], m[2] + 1])
            res = max(res, m[2])   
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 1:
                    return -1
        return res
        
      
      
      
      
      
      
        
 Number of islands:-
 
 class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        sft = [0, 1, 0, -1, 0]
        num=0
        def paint(x, y):
            if  0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == '1':
                grid[x][y] = '0'
                for i in range(len(grid)):
                    paint(x + sft[i], y + sft[i + 1])
                return 1
            return 0
        for x in range(len(grid)):
            for y in range(len(grid[0])):
                num+=(paint(x,y))  
        return num
        
        
        
        
        
        
Flood Fill:-


class Solution:
    def floodFill(self, image: List[List[int]], sr: int, sc: int, newColor: int) -> List[List[int]]:
        sColor = image[sr][sc]
        stack = [(sr,sc)]
        visited =[(sr,sc)]
        while stack:
            sr,sc = stack.pop()            
            image[sr][sc] = newColor
            
            for (sr,sc) in [(sr-1,sc),(sr,sc-1),(sr,sc+1),(sr+1,sc)]:
                if (sr >= 0 and sc >= 0 and sr < len(image) and sc < len(image[0]) and 
                    (sr,sc) not in visited and image[sr][sc] == sColor):
                    visited.append((sr,sc))
                    stack.append((sr,sc))
                
        return image
        
    
    
    
    
    
